generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                       String   @id
  userId                   String   @unique(map: "Account_userId_key")
  type                     String
  provider                 String?
  providerAccountId        String?
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  user                     user     @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model authenticator {
  credentialID         String  @unique(map: "Authenticator_credentialID_key")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Authenticator_userId_fkey")

  @@id([userId, credentialID])
}

model file {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "File_name_key")
  filename  String   @unique(map: "File_filename_key")
  slug      String   @unique(map: "File_slug_key")
  createdAt DateTime @default(now())
}

model image {
  id        Int      @id @default(autoincrement())
  title     String
  alt       String
  file      String   @unique(map: "Image_file_key")
  slug      String   @unique(map: "Image_slug_key")
  createdAt DateTime @default(now())
}

model log {
  id     Int      @id @default(autoincrement())
  action String
  color  String
  user   String
  date   DateTime @default(now())
}

model page {
  id        Int      @id @default(autoincrement())
  slug      String   @unique(map: "Page_slug_key")
  title     String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model role {
  id          Int      @id @default(autoincrement())
  name        String   @unique(map: "Role_name_key")
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  user        user[]
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         user     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_idx")
}

model stats_api {
  id                  Int      @id @default(autoincrement())
  timestamp           DateTime @default(now())
  totalRequests       Int
  averageResponseTime Float
  statusCodeCounts    Json
  averageResponseSize Float
  date                DateTime @default(now())
}

model stats_web {
  id    Int      @id @default(autoincrement())
  count Int
  page  String
  date  DateTime @default(now())
}

model user {
  id            String          @id
  name          String?
  username      String?         @unique(map: "User_username_key")
  email         String?         @unique(map: "User_email_key")
  password      String?         @unique(map: "User_password_key")
  image         String?
  roleId        Int?            @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  emailVerified Boolean?
  account       account?
  authenticator authenticator[]
  session       session[]
  role          role?           @relation(fields: [roleId], references: [id], map: "User_roleId_fkey")

  @@index([roleId], map: "User_roleId_fkey")
}

model verificationtoken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}
