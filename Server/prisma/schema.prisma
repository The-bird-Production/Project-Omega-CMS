
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String?   @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  role       String?   @db.Text
  banned     Boolean?
  banReason  String?   @db.Text
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String? @db.Text

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
model file {
  id        Int      @id @default(autoincrement())
  name      String   @unique(map: "File_name_key")
  filename  String   @unique(map: "File_filename_key")
  slug      String   @unique(map: "File_slug_key")
  createdAt DateTime @default(now())
}

model image {
  id        Int      @id @default(autoincrement())
  title     String
  alt       String
  file      String   @unique(map: "Image_file_key")
  slug      String   @unique(map: "Image_slug_key")
  createdAt DateTime @default(now())
}

model log {
  id     Int      @id @default(autoincrement())
  action String
  color  String
  user   String
  date   DateTime @default(now())
}

model page {
  id        Int      @id @default(autoincrement())
  slug      String   @unique(map: "Page_slug_key")
  title     String
  body      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model redirect {
  id        Int      @id @default(autoincrement())
  from      String   @unique(map: "Redirect_from_key")
  to        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model stats_api {
  id                  Int      @id @default(autoincrement())
  timestamp           DateTime @default(now())
  totalRequests       Int
  averageResponseTime Float
  statusCodeCounts    Json
  averageResponseSize Float
  date                DateTime @default(now())
}

model stats_web {
  id    Int      @id @default(autoincrement())
  count Int
  page  String
  date  DateTime @default(now())
}

model article {
  id          Int      @id @default(autoincrement())
  title       String   @unique(map: "Article_title_key")
  slug        String   @unique(map: "Article_slug_key")
  body        String   @db.Text
  image       String?
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime
}

model articleSaved {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique(map: "ArticleSaved_slug_key")
  body        String   @db.Text
  image       String?
  authorId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime
  
}