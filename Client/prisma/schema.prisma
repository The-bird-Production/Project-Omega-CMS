datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  password      String?         @unique
  emailVerified DateTime?
  image         String?
  roleId        Int?
  role          Role?           @relation(fields: [roleId], references: [id], onDelete: SetNull)
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String?  
  providerAccountId        String?  
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  permissions Json?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  filename  String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
}

model Image {
  id        Int      @id @default(autoincrement())
  title     String
  alt       String
  file      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
}

model Log {
  id     Int      @id @default(autoincrement())
  action String
  color  String
  user   String
  date   DateTime @default(now())
}

model Stats_web {
  id    Int      @id @default(autoincrement())
  count Int
  page  String
  date  DateTime @default(now())
}

model Stats_Api {
  id                  Int      @id @default(autoincrement())
  timestamp           DateTime @default(now())
  totalRequests       Int
  averageResponseTime Float
  statusCodeCounts    Json
  averageResponseSize Float
  date                DateTime @default(now())
}
